name: GCloud Build
on:
  #pull_request:
  #  branches: [main]
           
  workflow_dispatch:

env:
  GAR_INFO: us-central1-docker.pkg.dev/triangulum-ctv/stans-robot-shop
  CART_APP_NAME: rs-cart
  SHIPPING_APP_NAME: rs-shipping
  CATALOGUE_APP_NAME: rs-catalogue
  DISPATCH_APP_NAME: rs-dispatch
  MONGO_APP_NAME: rs-mongodb
  MYSQL_APP_NAME: rs-mysql-db
  PAYMENT_APP_NAME: rs-payment
  RATINGS_APP_NAME: rs-ratings
  USER_APP_NAME: rs-user
  WEB_APP_NAME: rs-web
  REDIS_APP_NAME: redis
  RABBITMQ_APP_NAME: rabbitmq

jobs:
  changes:
    name: Track Changes in Services
    runs-on: ubuntu-latest
    outputs:
      cart: ${{ steps.filter.outputs.cart }}
      catalogue: ${{ steps.filter.outputs.catalogue }}
      dispatch: ${{ steps.filter.outputs.dispatch }}
      mongo: ${{ steps.filter.outputs.mongo }}
      mysql: ${{ steps.filter.outputs.mysql }}
      payment: ${{ steps.filter.outputs.payment }}
      ratings: ${{ steps.filter.outputs.ratings }}
      shipping: ${{ steps.filter.outputs.shipping }}
      user: ${{ steps.filter.outputs.user }}
      web: ${{ steps.filter.outputs.web }}
      redis: ${{ steps.filter.outputs.redis }}
      rabbitmq: ${{ steps.filter.outputs.rabbitmq }}
      mockitoapp: ${{ steps.filter.outputs.mockitoapp}}
        
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2.10.2
      id: filter
      with:
        filters: |
          mockitoapp:
            - 'mockitoApp/**'
          cart:
            - 'cart/**'
          catalogue:
            - 'catalogue/**'
          dispatch: 
            - added|deleted|modified: 'dispatch/**'
          mongo:
            - added|deleted|modified: 'mongo/**'
          mysql:
            - added|deleted|modified: 'mysql/**'
          payment:
            - added|deleted|modified: 'payment/**'
          ratings:
            - added|deleted|modified: 'ratings/**'
          shipping:
            - added|deleted|modified: 'shipping/**'
          user:
            - added|deleted|modified: 'user/**'
          web:
            - added|deleted|modified: 'web/**'
          redis:
            - added|deleted|modified: 'redis/**'
          rabbitmq:
            - added|deleted|modified: 'rabbitmq/**'    
  
  build-mockito-app:
    name: Building Mockito Demo App
    needs: changes
    if: ${{ needs.changes.outputs.mockitoapp == 'true' }}
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          cache: Maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
          
      - name: Build and analyze on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONARCLOUD_URL: 'https://sonarqube.cloudapps.telus.com'
        if: github.event_name == 'pull_request'
        run: |
          cd mockitoApp
          mvn versions:set -DnewVersion=1.0.${{ github.event.pull_request.number }}
          mvn deploy \
          org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=cdo-triangulum-ctv \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.scm.forceReloadAll=true
        
      - name: Build and analyze on Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONARQUBE_GCP_TOKEN }}
          SONARCLOUD_URL: 'https://sonarqube.cloudapps.telus.com'
        if: github.event_name == 'push'
        run: |
          cd mockitoApp
          mvn versions:set -DnewVersion=1.0.SNAPTHOT.$(date +%s)
          mvn deploy \
          org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=cdo-triangulum-ctv \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          echo "List of files are folders generated are:"
          ls -lR

      - name: Jacoco Report
        id: jacoco
        uses: madrapps/jacoco-report@v1.2
        with:
          paths: mockitoApp/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "mockitoApp/target/surefire-reports/*.xml"
          report_individual_runs: "true"

  build-cart:
    name: Building CART IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.cart == 'true' }}
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat cart/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$CART_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$CART_APP_NAME":"$TAG" cart/
          gcloud info
          docker push "$GAR_INFO"/"$CART_APP_NAME":"$TAG"
  
  build-catalogue:
    name: Building CATALOGUE IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.catalogue == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat catalogue/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG" catalogue/
          gcloud info
          docker push "$GAR_INFO"/"$CATALOGUE_APP_NAME":"$TAG"
  
  build-dispatch:
    name: Building DISPATCH IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.dispatch == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat dispatch/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG" dispatch/
          gcloud info
          docker push "$GAR_INFO"/"$DISPATCH_APP_NAME":"$TAG"

  build-mongo:
    name: Building MONGODB IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.mongo == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat mongo/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG" mongo/
          gcloud info
          docker push "$GAR_INFO"/"$MONGO_APP_NAME":"$TAG"
  
  build-mysql:
    name: Building MYSQL-DB IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.mysql == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat mysql/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG" mysql/
          gcloud info
          docker push "$GAR_INFO"/"$MYSQL_APP_NAME":"$TAG"
  
  build-payment:
    name: Building PAYMENT IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.payment == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat payment/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG" payment/
          gcloud info
          docker push "$GAR_INFO"/"$PAYMENT_APP_NAME":"$TAG"

  build-ratings:
    name: Building RATINGS IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.ratings == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat ratings/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG" ratings/
          gcloud info
          docker push "$GAR_INFO"/"$RATINGS_APP_NAME":"$TAG"

  build-shipping:
    name: Building SHIPPING IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.shipping == 'true' }}
    runs-on: ubuntu-latest
    permissions:
     actions: write
     checks: write
     contents: write
     deployments: write
     id-token: write
     issues: write
     discussions: write
     packages: write
     pages: write
     pull-requests: write
     repository-projects: write
     security-events: write
     statuses: write
      

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                       
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          #credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
          # Below is a method of using Managed Identity Pools in GCP"
          workload_identity_provider: "${{ secrets.workload_identity_provider }}"
          service_account: 'triangulumadmin@triangulum-ctv.iam.gserviceaccount.com'
          project_id: triangulum-ctv
          token_format: 'access_token'
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Run Wiremock server
        run: |
          cd shipping
          docker run -d -p 8080:8080 -v $PWD/src/test/resources:/home/wiremock --name wiremock wiremock/wiremock:2.33.1
          docker container inspect wiremock
          echo `docker container port wiremock`
          mvn test
  
      - name: Publish Wiremock Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "shipping/target/surefire-reports/junitreports/*.xml"
       
      - name: Build-and-push-to-GAR
        run: |
          echo `pwd`
          export TAG=`cat shipping/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG" shipping/
          gcloud info
          docker push "$GAR_INFO"/"$SHIPPING_APP_NAME":"$TAG"

  build-user:
    name: Building USER IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.user == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat user/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$USER_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$USER_APP_NAME":"$TAG" user/
          gcloud info
          docker push "$GAR_INFO"/"$USER_APP_NAME":"$TAG"

  build-web:
    name: Building WEB IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat web/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$WEB_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$WEB_APP_NAME":"$TAG" web/
          gcloud info
          docker push "$GAR_INFO"/"$WEB_APP_NAME":"$TAG"
  
  build-redis:
    name: Building Redis IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.redis == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat redis/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG" redis/
          gcloud info
          docker push "$GAR_INFO"/"$REDIS_APP_NAME":"$TAG"

  build-rabbitmq:
    name: Building RabbitMQ IMAGE
    needs: changes
    if: ${{ needs.changes.outputs.rabbitmq == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
                        
      - name: Setup GCP Service Account
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'
      
      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup Docker
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Build the Docker image
       
      - name: Build-and-push-to-GAR
        run: |
          export TAG=`cat rabbitmq/VERSION.txt`
          echo $TAG
          echo "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG"
          docker build -t "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG" rabbitmq/
          gcloud info
          docker push "$GAR_INFO"/"$RABBITMQ_APP_NAME":"$TAG"
